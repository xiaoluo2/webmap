{"id":"node_modules/elm-pep/dist/elm-pep.js","dependencies":[{"name":"C:\\Users\\Xiao Luo\\GIS\\Webmap\\working\\node_modules\\elm-pep\\dist\\elm-pep.js.map","includedInParent":true,"mtime":1585933036541},{"name":"C:\\Users\\Xiao Luo\\GIS\\Webmap\\working\\node_modules\\elm-pep\\src\\elm-pep.js","includedInParent":true,"mtime":1585933036541},{"name":"C:\\Users\\Xiao Luo\\GIS\\Webmap\\working\\package.json","includedInParent":true,"mtime":1585933080594},{"name":"C:\\Users\\Xiao Luo\\GIS\\Webmap\\working\\node_modules\\elm-pep\\package.json","includedInParent":true,"mtime":1585933036541}],"generated":{"js":"// This Source Code Form is subject to the terms of the Mozilla Public\r\n// License, v. 2.0. If a copy of the MPL was not distributed with this\r\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\r\n// Variable to hold current primary touch event identifier.\r\n// iOS needs this since it does not attribute\r\n// identifier 0 to primary touch event.\r\nvar primaryTouchId = null;\r\n// Variable to hold mouse pointer captures.\r\nvar mouseCaptureTarget = null;\r\nif (!(\"PointerEvent\" in window)) {\r\n    // Define {set,release}PointerCapture\r\n    definePointerCapture();\r\n    // Create Pointer polyfill from mouse events only on non-touch device\r\n    if (!(\"TouchEvent\" in window)) {\r\n        addMouseToPointerListener(document, \"mousedown\", \"pointerdown\");\r\n        addMouseToPointerListener(document, \"mousemove\", \"pointermove\");\r\n        addMouseToPointerListener(document, \"mouseup\", \"pointerup\");\r\n    }\r\n    // Define Pointer polyfill from touch events\r\n    addTouchToPointerListener(document, \"touchstart\", \"pointerdown\");\r\n    addTouchToPointerListener(document, \"touchmove\", \"pointermove\");\r\n    addTouchToPointerListener(document, \"touchend\", \"pointerup\");\r\n}\r\n// Function defining {set,release}PointerCapture from {set,releas}Capture\r\nfunction definePointerCapture() {\r\n    Element.prototype.setPointerCapture = Element.prototype.setCapture;\r\n    Element.prototype.releasePointerCapture = Element.prototype.releaseCapture;\r\n}\r\n// Function converting a Mouse event to a Pointer event.\r\nfunction addMouseToPointerListener(target, mouseType, pointerType) {\r\n    target.addEventListener(mouseType, function (mouseEvent) {\r\n        var pointerEvent = new MouseEvent(pointerType, mouseEvent);\r\n        pointerEvent.pointerId = 1;\r\n        pointerEvent.isPrimary = true;\r\n        pointerEvent.pointerType = \"mouse\";\r\n        pointerEvent.width = 1;\r\n        pointerEvent.height = 1;\r\n        pointerEvent.tiltX = 0;\r\n        pointerEvent.tiltY = 0;\r\n        // pressure is 0.5 if a button is holded\r\n        \"buttons\" in mouseEvent && mouseEvent.buttons !== 0\r\n            ? (pointerEvent.pressure = 0.5)\r\n            : (pointerEvent.pressure = 0);\r\n        // if already capturing mouse event, transfer target\r\n        // and don't forget implicit release on mouseup.\r\n        var target = mouseEvent.target;\r\n        if (mouseCaptureTarget !== null) {\r\n            target = mouseCaptureTarget;\r\n            if (mouseType === \"mouseup\") {\r\n                mouseCaptureTarget = null;\r\n            }\r\n        }\r\n        target.dispatchEvent(pointerEvent);\r\n        if (pointerEvent.defaultPrevented) {\r\n            mouseEvent.preventDefault();\r\n        }\r\n    });\r\n}\r\n// Function converting a Touch event to a Pointer event.\r\nfunction addTouchToPointerListener(target, touchType, pointerType) {\r\n    target.addEventListener(touchType, function (touchEvent) {\r\n        var changedTouches = touchEvent.changedTouches;\r\n        var nbTouches = changedTouches.length;\r\n        for (var t = 0; t < nbTouches; t++) {\r\n            var pointerEvent = new CustomEvent(pointerType, {\r\n                bubbles: true,\r\n                cancelable: true\r\n            });\r\n            pointerEvent.ctrlKey = touchEvent.ctrlKey;\r\n            pointerEvent.shiftKey = touchEvent.shiftKey;\r\n            pointerEvent.altKey = touchEvent.altKey;\r\n            pointerEvent.metaKey = touchEvent.metaKey;\r\n            var touch = changedTouches.item(t);\r\n            pointerEvent.clientX = touch.clientX;\r\n            pointerEvent.clientY = touch.clientY;\r\n            pointerEvent.screenX = touch.screenX;\r\n            pointerEvent.screenY = touch.screenY;\r\n            pointerEvent.pageX = touch.pageX;\r\n            pointerEvent.pageY = touch.pageY;\r\n            var rect = touch.target.getBoundingClientRect();\r\n            pointerEvent.offsetX = touch.clientX - rect.left;\r\n            pointerEvent.offsetY = touch.clientY - rect.top;\r\n            pointerEvent.pointerId = 1 + touch.identifier;\r\n            // Default values for standard MouseEvent fields.\r\n            pointerEvent.button = 0;\r\n            pointerEvent.buttons = 1;\r\n            pointerEvent.movementX = 0;\r\n            pointerEvent.movementY = 0;\r\n            pointerEvent.region = null;\r\n            pointerEvent.relatedTarget = null;\r\n            pointerEvent.x = pointerEvent.clientX;\r\n            pointerEvent.y = pointerEvent.clientY;\r\n            // Pointer event details\r\n            pointerEvent.pointerType = \"touch\";\r\n            pointerEvent.width = 1;\r\n            pointerEvent.height = 1;\r\n            pointerEvent.tiltX = 0;\r\n            pointerEvent.tiltY = 0;\r\n            pointerEvent.pressure = 1;\r\n            // First touch is the primary pointer event.\r\n            if (touchType === \"touchstart\" && primaryTouchId === null) {\r\n                primaryTouchId = touch.identifier;\r\n            }\r\n            pointerEvent.isPrimary = touch.identifier === primaryTouchId;\r\n            // If first touch ends, reset primary touch id.\r\n            if (touchType === \"touchend\" && pointerEvent.isPrimary) {\r\n                primaryTouchId = null;\r\n            }\r\n            touchEvent.target.dispatchEvent(pointerEvent);\r\n            if (pointerEvent.defaultPrevented) {\r\n                touchEvent.preventDefault();\r\n            }\r\n        }\r\n    });\r\n}\r\n"},"sourceMaps":{"js":{"version":3,"file":"elm-pep.js","sourceRoot":"","sources":["../src/elm-pep.js"],"names":[],"mappings":"AAAA,sEAAsE;AACtE,sEAAsE;AACtE,0DAA0D;AAE1D,2DAA2D;AAC3D,6CAA6C;AAC7C,uCAAuC;AACvC,IAAI,cAAc,GAAG,IAAI,CAAC;AAE1B,2CAA2C;AAC3C,IAAI,kBAAkB,GAAG,IAAI,CAAC;AAE9B,IAAI,CAAC,CAAC,cAAc,IAAI,MAAM,CAAC,EAAE;IAC/B,qCAAqC;IACrC,oBAAoB,EAAE,CAAC;IAEvB,qEAAqE;IACrE,IAAI,CAAC,CAAC,YAAY,IAAI,MAAM,CAAC,EAAE;QAC7B,yBAAyB,CAAC,QAAQ,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;QAChE,yBAAyB,CAAC,QAAQ,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;QAChE,yBAAyB,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;KAC7D;IAED,4CAA4C;IAC5C,yBAAyB,CAAC,QAAQ,EAAE,YAAY,EAAE,aAAa,CAAC,CAAC;IACjE,yBAAyB,CAAC,QAAQ,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;IAChE,yBAAyB,CAAC,QAAQ,EAAE,UAAU,EAAE,WAAW,CAAC,CAAC;CAC9D;AAED,yEAAyE;AACzE,SAAS,oBAAoB;IAC3B,OAAO,CAAC,SAAS,CAAC,iBAAiB,GAAG,OAAO,CAAC,SAAS,CAAC,UAAU,CAAC;IACnE,OAAO,CAAC,SAAS,CAAC,qBAAqB,GAAG,OAAO,CAAC,SAAS,CAAC,cAAc,CAAC;AAC7E,CAAC;AAED,wDAAwD;AACxD,SAAS,yBAAyB,CAAC,MAAM,EAAE,SAAS,EAAE,WAAW;IAC/D,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAA,UAAU;QAC3C,IAAI,YAAY,GAAG,IAAI,UAAU,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;QAC3D,YAAY,CAAC,SAAS,GAAG,CAAC,CAAC;QAC3B,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC;QAC9B,YAAY,CAAC,WAAW,GAAG,OAAO,CAAC;QACnC,YAAY,CAAC,KAAK,GAAG,CAAC,CAAC;QACvB,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;QACxB,YAAY,CAAC,KAAK,GAAG,CAAC,CAAC;QACvB,YAAY,CAAC,KAAK,GAAG,CAAC,CAAC;QAEvB,wCAAwC;QACxC,SAAS,IAAI,UAAU,IAAI,UAAU,CAAC,OAAO,KAAK,CAAC;YACjD,CAAC,CAAC,CAAC,YAAY,CAAC,QAAQ,GAAG,GAAG,CAAC;YAC/B,CAAC,CAAC,CAAC,YAAY,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;QAEhC,oDAAoD;QACpD,gDAAgD;QAChD,IAAI,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;QAC/B,IAAI,kBAAkB,KAAK,IAAI,EAAE;YAC/B,MAAM,GAAG,kBAAkB,CAAC;YAC5B,IAAI,SAAS,KAAK,SAAS,EAAE;gBAC3B,kBAAkB,GAAG,IAAI,CAAC;aAC3B;SACF;QAED,MAAM,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QACnC,IAAI,YAAY,CAAC,gBAAgB,EAAE;YACjC,UAAU,CAAC,cAAc,EAAE,CAAC;SAC7B;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAED,wDAAwD;AACxD,SAAS,yBAAyB,CAAC,MAAM,EAAE,SAAS,EAAE,WAAW;IAC/D,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAA,UAAU;QAC3C,IAAM,cAAc,GAAG,UAAU,CAAC,cAAc,CAAC;QACjD,IAAM,SAAS,GAAG,cAAc,CAAC,MAAM,CAAC;QACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;YAClC,IAAI,YAAY,GAAG,IAAI,WAAW,CAAC,WAAW,EAAE;gBAC9C,OAAO,EAAE,IAAI;gBACb,UAAU,EAAE,IAAI;aACjB,CAAC,CAAC;YACH,YAAY,CAAC,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC;YAC1C,YAAY,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;YAC5C,YAAY,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;YACxC,YAAY,CAAC,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC;YAE1C,IAAM,KAAK,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACrC,YAAY,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;YACrC,YAAY,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;YACrC,YAAY,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;YACrC,YAAY,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;YACrC,YAAY,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;YACjC,YAAY,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;YACjC,IAAM,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,qBAAqB,EAAE,CAAC;YAClD,YAAY,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;YACjD,YAAY,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC;YAChD,YAAY,CAAC,SAAS,GAAG,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC;YAE9C,iDAAiD;YACjD,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;YACxB,YAAY,CAAC,OAAO,GAAG,CAAC,CAAC;YACzB,YAAY,CAAC,SAAS,GAAG,CAAC,CAAC;YAC3B,YAAY,CAAC,SAAS,GAAG,CAAC,CAAC;YAC3B,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC;YAC3B,YAAY,CAAC,aAAa,GAAG,IAAI,CAAC;YAClC,YAAY,CAAC,CAAC,GAAG,YAAY,CAAC,OAAO,CAAC;YACtC,YAAY,CAAC,CAAC,GAAG,YAAY,CAAC,OAAO,CAAC;YAEtC,wBAAwB;YACxB,YAAY,CAAC,WAAW,GAAG,OAAO,CAAC;YACnC,YAAY,CAAC,KAAK,GAAG,CAAC,CAAC;YACvB,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;YACxB,YAAY,CAAC,KAAK,GAAG,CAAC,CAAC;YACvB,YAAY,CAAC,KAAK,GAAG,CAAC,CAAC;YACvB,YAAY,CAAC,QAAQ,GAAG,CAAC,CAAC;YAE1B,4CAA4C;YAC5C,IAAI,SAAS,KAAK,YAAY,IAAI,cAAc,KAAK,IAAI,EAAE;gBACzD,cAAc,GAAG,KAAK,CAAC,UAAU,CAAC;aACnC;YACD,YAAY,CAAC,SAAS,GAAG,KAAK,CAAC,UAAU,KAAK,cAAc,CAAC;YAE7D,+CAA+C;YAC/C,IAAI,SAAS,KAAK,UAAU,IAAI,YAAY,CAAC,SAAS,EAAE;gBACtD,cAAc,GAAG,IAAI,CAAC;aACvB;YAED,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;YAC9C,IAAI,YAAY,CAAC,gBAAgB,EAAE;gBACjC,UAAU,CAAC,cAAc,EAAE,CAAC;aAC7B;SACF;IACH,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["// This Source Code Form is subject to the terms of the Mozilla Public\r\n// License, v. 2.0. If a copy of the MPL was not distributed with this\r\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\r\n\r\n// Variable to hold current primary touch event identifier.\r\n// iOS needs this since it does not attribute\r\n// identifier 0 to primary touch event.\r\nlet primaryTouchId = null;\r\n\r\n// Variable to hold mouse pointer captures.\r\nlet mouseCaptureTarget = null;\r\n\r\nif (!(\"PointerEvent\" in window)) {\r\n  // Define {set,release}PointerCapture\r\n  definePointerCapture();\r\n\r\n  // Create Pointer polyfill from mouse events only on non-touch device\r\n  if (!(\"TouchEvent\" in window)) {\r\n    addMouseToPointerListener(document, \"mousedown\", \"pointerdown\");\r\n    addMouseToPointerListener(document, \"mousemove\", \"pointermove\");\r\n    addMouseToPointerListener(document, \"mouseup\", \"pointerup\");\r\n  }\r\n\r\n  // Define Pointer polyfill from touch events\r\n  addTouchToPointerListener(document, \"touchstart\", \"pointerdown\");\r\n  addTouchToPointerListener(document, \"touchmove\", \"pointermove\");\r\n  addTouchToPointerListener(document, \"touchend\", \"pointerup\");\r\n}\r\n\r\n// Function defining {set,release}PointerCapture from {set,releas}Capture\r\nfunction definePointerCapture() {\r\n  Element.prototype.setPointerCapture = Element.prototype.setCapture;\r\n  Element.prototype.releasePointerCapture = Element.prototype.releaseCapture;\r\n}\r\n\r\n// Function converting a Mouse event to a Pointer event.\r\nfunction addMouseToPointerListener(target, mouseType, pointerType) {\r\n  target.addEventListener(mouseType, mouseEvent => {\r\n    let pointerEvent = new MouseEvent(pointerType, mouseEvent);\r\n    pointerEvent.pointerId = 1;\r\n    pointerEvent.isPrimary = true;\r\n    pointerEvent.pointerType = \"mouse\";\r\n    pointerEvent.width = 1;\r\n    pointerEvent.height = 1;\r\n    pointerEvent.tiltX = 0;\r\n    pointerEvent.tiltY = 0;\r\n\r\n    // pressure is 0.5 if a button is holded\r\n    \"buttons\" in mouseEvent && mouseEvent.buttons !== 0\r\n      ? (pointerEvent.pressure = 0.5)\r\n      : (pointerEvent.pressure = 0);\r\n\r\n    // if already capturing mouse event, transfer target\r\n    // and don't forget implicit release on mouseup.\r\n    let target = mouseEvent.target;\r\n    if (mouseCaptureTarget !== null) {\r\n      target = mouseCaptureTarget;\r\n      if (mouseType === \"mouseup\") {\r\n        mouseCaptureTarget = null;\r\n      }\r\n    }\r\n\r\n    target.dispatchEvent(pointerEvent);\r\n    if (pointerEvent.defaultPrevented) {\r\n      mouseEvent.preventDefault();\r\n    }\r\n  });\r\n}\r\n\r\n// Function converting a Touch event to a Pointer event.\r\nfunction addTouchToPointerListener(target, touchType, pointerType) {\r\n  target.addEventListener(touchType, touchEvent => {\r\n    const changedTouches = touchEvent.changedTouches;\r\n    const nbTouches = changedTouches.length;\r\n    for (let t = 0; t < nbTouches; t++) {\r\n      let pointerEvent = new CustomEvent(pointerType, {\r\n        bubbles: true,\r\n        cancelable: true\r\n      });\r\n      pointerEvent.ctrlKey = touchEvent.ctrlKey;\r\n      pointerEvent.shiftKey = touchEvent.shiftKey;\r\n      pointerEvent.altKey = touchEvent.altKey;\r\n      pointerEvent.metaKey = touchEvent.metaKey;\r\n\r\n      const touch = changedTouches.item(t);\r\n      pointerEvent.clientX = touch.clientX;\r\n      pointerEvent.clientY = touch.clientY;\r\n      pointerEvent.screenX = touch.screenX;\r\n      pointerEvent.screenY = touch.screenY;\r\n      pointerEvent.pageX = touch.pageX;\r\n      pointerEvent.pageY = touch.pageY;\r\n      const rect = touch.target.getBoundingClientRect();\r\n      pointerEvent.offsetX = touch.clientX - rect.left;\r\n      pointerEvent.offsetY = touch.clientY - rect.top;\r\n      pointerEvent.pointerId = 1 + touch.identifier;\r\n\r\n      // Default values for standard MouseEvent fields.\r\n      pointerEvent.button = 0;\r\n      pointerEvent.buttons = 1;\r\n      pointerEvent.movementX = 0;\r\n      pointerEvent.movementY = 0;\r\n      pointerEvent.region = null;\r\n      pointerEvent.relatedTarget = null;\r\n      pointerEvent.x = pointerEvent.clientX;\r\n      pointerEvent.y = pointerEvent.clientY;\r\n\r\n      // Pointer event details\r\n      pointerEvent.pointerType = \"touch\";\r\n      pointerEvent.width = 1;\r\n      pointerEvent.height = 1;\r\n      pointerEvent.tiltX = 0;\r\n      pointerEvent.tiltY = 0;\r\n      pointerEvent.pressure = 1;\r\n\r\n      // First touch is the primary pointer event.\r\n      if (touchType === \"touchstart\" && primaryTouchId === null) {\r\n        primaryTouchId = touch.identifier;\r\n      }\r\n      pointerEvent.isPrimary = touch.identifier === primaryTouchId;\r\n\r\n      // If first touch ends, reset primary touch id.\r\n      if (touchType === \"touchend\" && pointerEvent.isPrimary) {\r\n        primaryTouchId = null;\r\n      }\r\n\r\n      touchEvent.target.dispatchEvent(pointerEvent);\r\n      if (pointerEvent.defaultPrevented) {\r\n        touchEvent.preventDefault();\r\n      }\r\n    }\r\n  });\r\n}\r\n"]}},"error":null,"hash":"7b81fc5e3b36ad1b2dd732c7cf560478","cacheData":{"env":{}}}